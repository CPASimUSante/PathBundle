{% extends "ClarolineCoreBundle:Workspace:layout.html.twig" %}

{% block stylesheets %}
    {# Claroline CSS #}
    {{ parent() }}

    {# Path Editor styles #}
    {% stylesheets debug=false filter='cssmin'  output='vendor/innovapath/editor.css'
        '@InnovaAngularUIPageslideBundle/Resources/public/css/*'
        '@InnovaAngularUITreeBundle/Resources/public/css/*'
        '@InnovaPathBundle/Resources/public/css/Editor/*'
        '@InnovaPathBundle/Resources/public/css/tree-view.css'
        '@InnovaPathBundle/Resources/public/css/colors.css'
    %}
    <link rel="stylesheet" media="screen" href="{{ asset_url }}" />
    {% endstylesheets %}

    {% stylesheets debug=false filter='lessphp, cssmin' output='vendor/innovapath/editor2.css'
        '@InnovaPathBundle/Resources/public/less/Editor/app.less'
    %}
    <link rel="stylesheet" media="screen" href="{{ asset_url }}" />
    {% endstylesheets %}
{% endblock %}

{% block content %}
    {# Angular UI #}
    <div data-ng-cloak="" data-ng-app="PathEditorApp" class="path-editor">
        {# Templates Sidebar #}
        <path-template-sidebar></path-template-sidebar>

        {# Path Form #}
        <path-form data-path="{{ _resource | json_encode | raw | escape }}"></path-form>
    </div>
{% endblock %}

{% block javascripts %}
    {# Claroline JS #}
    {{ parent() }}

    {# Translations #}
    <script type="text/javascript" src="{{ url('bazinga_jstranslation_js', { 'domain': 'path_editor' }) }}"></script>

    {# Angular JS #}
    {% javascripts debug=false filter='jsmin' output='vendor/angular/angular-js.js'
        '@InnovaAngularJSBundle/Resources/public/js/angular.min.js'
        '@InnovaAngularJSBundle/Resources/public/js/angular-sanitize.min.js'
        '@InnovaAngularJSBundle/Resources/public/js/angular-resource.min.js'
        '@InnovaAngularJSBundle/Resources/public/js/angular-touch.min.js'
    %}
    <script type="text/javascript" src="{{ asset_url }}"></script>
    {% endjavascripts %}

    {# Angular UI #}
    {% javascripts debug=false filter='jsmin' output='vendor/angular/angular-ui.js'
        '@InnovaAngularUIBootstrapBundle/Resources/public/js/*'
        '@InnovaAngularUITreeBundle/Resources/public/js/*'
        '@InnovaAngularUIPageslideBundle/Resources/public/js/*'
        '@InnovaAngularUITinyMCEBundle/Resources/public/js/*'
        '@InnovaAngularUITranslationBundle/Resources/public/js/*'
        '@InnovaAngularUIResourcePickerBundle/Resources/public/js/*'
    %}
    <script type="text/javascript" src="{{ asset_url }}"></script>
    {% endjavascripts %}

    {% javascripts debug=false filter='jsmin' output='vendor/innovapath/editor.js'
        '@InnovaPathBundle/Resources/public/angularjs/Utils/*'
        '@InnovaPathBundle/Resources/public/angularjs/Utils/Filter/*'
        '@InnovaPathBundle/Resources/public/angularjs/Utils/Service/*'
        '@InnovaPathBundle/Resources/public/angularjs/Utils/Resource/*'

        '@InnovaPathBundle/Resources/public/angularjs/Alert/*'
        '@InnovaPathBundle/Resources/public/angularjs/Alert/Service/*'
        '@InnovaPathBundle/Resources/public/angularjs/Alert/Directive/*'

        '@InnovaPathBundle/Resources/public/angularjs/Clipboard/*'
        '@InnovaPathBundle/Resources/public/angularjs/Clipboard/Service/*'

        '@InnovaPathBundle/Resources/public/angularjs/Confirm/*'
        '@InnovaPathBundle/Resources/public/angularjs/Confirm/Controller/*'
        '@InnovaPathBundle/Resources/public/angularjs/Confirm/Service/*'

        '@InnovaPathBundle/Resources/public/angularjs/History/*'
        '@InnovaPathBundle/Resources/public/angularjs/History/Service/*'

        '@InnovaPathBundle/Resources/public/angularjs/Path/*'
        '@InnovaPathBundle/Resources/public/angularjs/Path/Controller/*'
        '@InnovaPathBundle/Resources/public/angularjs/Path/Directive/*'
        '@InnovaPathBundle/Resources/public/angularjs/Path/Service/*'

        '@InnovaPathBundle/Resources/public/angularjs/Resource/*'
        '@InnovaPathBundle/Resources/public/angularjs/Resource/Service/*'

        '@InnovaPathBundle/Resources/public/angularjs/Step/*'
        '@InnovaPathBundle/Resources/public/angularjs/Step/Controller/*'
        '@InnovaPathBundle/Resources/public/angularjs/Step/Directive/*'
        '@InnovaPathBundle/Resources/public/angularjs/Step/Service/*'

        '@InnovaPathBundle/Resources/public/angularjs/Template/*'
        '@InnovaPathBundle/Resources/public/angularjs/Template/Controller/*'
        '@InnovaPathBundle/Resources/public/angularjs/Template/Directive/*'
        '@InnovaPathBundle/Resources/public/angularjs/Template/Resource/*'
        '@InnovaPathBundle/Resources/public/angularjs/Template/Service/*'

        '@InnovaPathBundle/Resources/public/angularjs/PathEditor.app.js'
    %}
    <script type="text/javascript" src="{{ asset_url }}"></script>
    {% endjavascripts %}

    {# Set some vars needed by Angular parts #}
    <script type="text/javascript">
        {# Make Twig variables accessibles by AngularJS #}
        var EditorApp = {};

        EditorApp.workspaceId   = {{ workspace.id }};
        EditorApp.appDir        = "{{ app.request.getBaseUrl }}";
        EditorApp.webDir        = "{{ asset('') }}";
        EditorApp.wsDirectoryId = {{ wsDirectoryId }};
        EditorApp.locale        = "{{ app.request.locale ~ '_' ~ app.request.locale|upper }}";

        EditorApp.resourceIcons = {
            {% for resourceIcon in resourceIcons %}
            "{{ resourceIcon.mimeType }}" : "{{ asset(resourceIcon.relativeUrl) }}"{% if loop.last != true %},{% endif %}
            {% endfor %}
        };

        EditorApp.resourceTypes = {
            {% for resourceType in resourceTypes %}
            "{{ resourceType.getName() }}": {
                "name": "{{ resourceType.getName()|trans({}, 'resource') }}",
                "actions": {
                    {% for action in resourceType.getActions() %}
                    "{{ action.getName() }}": {
                        "name":     "{{ action.getName() }}",
                        "route":    "{{ path('claro_resource_action', {'resourceType': resourceType.getName(), 'action': action.getName(), 'node': '_nodeId' }) }}",
                        "async":    {% if action.isAsync() %} 1 {% else %} 0 {% endif %},
                        "mask":     {{ action.getValue() }},
                        "isCustom": {% if action.isCustom() %} "yes" {% else %} "no" {% endif %},
                        "isForm":   {% if action.isForm() %} true {% else %} false {% endif %}
                    }
                    {% if loop.last != true %},{% endif %}
                    {% endfor %}
                }
            }{% if loop.last != true %},{% endif %}
            {% endfor %}
        };
    </script>
{% endblock %}
